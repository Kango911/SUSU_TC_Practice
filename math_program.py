import random
import operator


class MathTrainer:
    def __init__(self):
        self.operations = {
            '+': operator.add,
            '-': operator.sub,
            '*': operator.mul,
            '/': operator.truediv
        }
        self.operation_symbols = list(self.operations.keys())

    def generate_expression(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∏ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–ª–∞
        num1 = random.randint(100, 999)
        num2 = random.randint(100, 999)
        num3 = random.randint(100, 999)

        # –í—ã–±–∏—Ä–∞–µ–º –¥–≤–µ —Å–ª—É—á–∞–π–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        op1 = random.choice(self.operation_symbols)
        op2 = random.choice(self.operation_symbols)

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        expression = f"({num1} {op1} {num2}) {op2} {num3}"

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            first_result = self.operations[op1](num1, num2)
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ç–æ—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            final_result = self.operations[op2](first_result, num3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –∏ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å
            if final_result == float('inf') or final_result == float('-inf'):
                return self.generate_expression()

            return expression, round(final_result, 2)

        except ZeroDivisionError:
            return self.generate_expression()

    def check_answer(self, user_answer, correct_answer):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏"""
        try:
            user_float = float(user_answer)
            return abs(user_float - correct_answer) < 0.01
        except ValueError:
            return False


def math_program():
    trainer = MathTrainer()

    print("=" * 50)
    print("–ü–†–û–ì–†–ê–ú–ú–ê: –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´")
    print("=" * 50)
    print("–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏!")
    print("–í–≤–æ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π")
    print("=" * 50)

    score = 0
    total_questions = 5

    for i in range(total_questions):
        print(f"\n–í–æ–ø—Ä–æ—Å {i + 1}/{total_questions}:")

        expression, correct_answer = trainer.generate_expression()
        print(f"–í—ã—á–∏—Å–ª–∏—Ç–µ: {expression}")

        user_answer = input("–í–∞—à –æ—Ç–≤–µ—Ç: ").strip().replace(',', '.')

        if trainer.check_answer(user_answer, correct_answer):
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            score += 1
        else:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    print("\n" + "=" * 50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{total_questions}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score / total_questions * 100:.1f}%")

    if score == total_questions:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π!")
    elif score >= total_questions * 0.7:
        print("üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    elif score >= total_questions * 0.5:
        print("üòä –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!")
    else:
        print("üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!")


if __name__ == "__main__":
    math_program()